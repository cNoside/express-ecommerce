{
  request: { method: 'GET', url: '/api/v1/users', remoteAddress: '::1' },
  level: 'error',
  message: 'foo',
  timestamp: '14/Aug/2022:03:16:17 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/users',
    remoteAddress: '::1',
    body: { email: 'bar' }
  },
  level: 'error',
  message: 'keyValidator._parse is not a function',
  timestamp: '14/Aug/2022:03:53:58 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/users',
    remoteAddress: '::1',
    body: { email: 'bar' }
  },
  level: 'error',
  message: 'keyValidator._parse is not a function',
  timestamp: '14/Aug/2022:03:54:07 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/users',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: 'Unexpected token / in JSON at position 7',
  timestamp: '14/Aug/2022:03:56:05 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/users',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: 'Unexpected string in JSON at position 106',
  timestamp: '14/Aug/2022:04:18:24 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/users',
    remoteAddress: '::1',
    body: {
      email: 'root@internal.com',
      username: 'Buford73',
      password: '1q!Q1q!Q',
      role: 'user'
    }
  },
  level: 'error',
  message: 'Async refinement encountered during synchronous parse operation. Use .parseAsync instead.',
  timestamp: '14/Aug/2022:04:32:12 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/auth/whoami',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.findUnique()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\common\\config\\passport.ts:47:40\n' +
    '\n' +
    '  44 const id = payload.sub;\n' +
    '  45 console.log(payload)\n' +
    '  46 try {\n' +
    '→ 47   const user = await prisma.user.findUnique({\n' +
    '         where: {\n' +
    '       ?   id?: Int,\n' +
    '       ?   email?: String\n' +
    '         }\n' +
    '       })\n' +
    '\n' +
    'Argument where of type UserWhereUniqueInput needs at least one argument. Available args are listed in green.\n' +
    '\n' +
    'Note: Lines with ? are optional.\n',
  timestamp: '14/Aug/2022:07:03:04 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/auth/whoami',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.findUnique()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\common\\config\\passport.ts:46:40\n' +
    '\n' +
    '  43 new JwtStrategy(jwtStrategyOptions, async (payload, done) => {\n' +
    '  44   const id = payload.sub;\n' +
    '  45   try {\n' +
    '→ 46     const user = await prisma.user.findUnique({\n' +
    '           where: {\n' +
    '         ?   id?: Int,\n' +
    '         ?   email?: String\n' +
    '           }\n' +
    '         })\n' +
    '\n' +
    'Argument where of type UserWhereUniqueInput needs at least one argument. Available args are listed in green.\n' +
    '\n' +
    'Note: Lines with ? are optional.\n',
  timestamp: '14/Aug/2022:07:03:38 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/users',
    remoteAddress: '::1',
    body: {
      email: 'root@internal.com',
      username: 'Irma_Von64',
      password: '1q!Q1q!Q',
      role: 'admin'
    }
  },
  level: 'error',
  message: 'Unknown authentication strategy "jwt"',
  timestamp: '14/Aug/2022:07:19:36 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/auth/signup',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: 'Unexpected token } in JSON at position 105',
  timestamp: '14/Aug/2022:04:34:29 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/auth/signup',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: 'Unexpected token } in JSON at position 101',
  timestamp: '14/Aug/2022:04:34:36 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/auth/signup',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: 'Unexpected token } in JSON at position 101',
  timestamp: '14/Aug/2022:04:34:57 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: 'Internal Server Error',
  timestamp: '15/Aug/2022:06:45:25 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: 'Internal Server Error',
  timestamp: '15/Aug/2022:06:45:33 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: 'foo',
  timestamp: '15/Aug/2022:06:45:47 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: undefined,
  timestamp: '15/Aug/2022:06:47:54 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: 'foo',
  timestamp: '15/Aug/2022:06:48:08 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: undefined,
  timestamp: '15/Aug/2022:06:48:21 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users/test',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.findUnique()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:36:36\n' +
    '\n' +
    "  33 '/:id',\n" +
    '  34 asyncHandler(async (req, res) => {\n' +
    '  35   const { id } = req.params;\n' +
    '→ 36   const user = await prisma.user.findUnique({\n' +
    '         where: {\n' +
    "           id: 'test'\n" +
    '               ~~~~~~\n' +
    '         }\n' +
    '       })\n' +
    '\n' +
    "Argument id: Got invalid value 'test' on prisma.findUniqueUser. Provided String, expected Int.\n" +
    '\n',
  timestamp: '15/Aug/2022:06:49:25 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users/test',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.findUnique()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:36:36\n' +
    '\n' +
    "  33 '/:id',\n" +
    '  34 asyncHandler(async (req, res) => {\n' +
    '  35   const { id } = req.params;\n' +
    '→ 36   const user = await prisma.user.findUnique({\n' +
    '         where: {\n' +
    '           id: NaN\n' +
    '               ~~~\n' +
    '         }\n' +
    '       })\n' +
    '\n' +
    'Argument id: Got invalid value NaN on prisma.findUniqueUser. Provided Float, expected Int.\n' +
    '\n',
  timestamp: '15/Aug/2022:06:49:50 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users/213',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.findUnique()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:40:36\n' +
    '\n' +
    "  37 const isAdmin = req.isRole(['admin']);\n" +
    '  38 \n' +
    '  39 const { id } = req.params;\n' +
    '→ 40 const user = await prisma.user.findUnique({\n' +
    '       where: {\n' +
    '         id: 213\n' +
    '       },\n' +
    '       select: {\n' +
    '     ?   password?: true,\n' +
    '     ?   id?: true,\n' +
    '     ?   email?: true,\n' +
    '     ?   username?: true,\n' +
    '     ?   role?: true,\n' +
    '     ?   createdAt?: true,\n' +
    '     ?   updatedAt?: true,\n' +
    '     ?   profile?: true\n' +
    '       }\n' +
    '     })\n' +
    '\n' +
    '\n' +
    'The `select` statement for type User needs at least one truthy value.\n',
  timestamp: '15/Aug/2022:07:02:40 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users/213',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.findUnique()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:40:36\n' +
    '\n' +
    "  37 const isAdmin = req.isRole(['admin']);\n" +
    '  38 \n' +
    '  39 const { id } = req.params;\n' +
    '→ 40 const user = await prisma.user.findUnique({\n' +
    '       where: {\n' +
    '         id: 213\n' +
    '       },\n' +
    '       select: {\n' +
    '     ?   password?: true,\n' +
    '     ?   id?: true,\n' +
    '     ?   email?: true,\n' +
    '     ?   username?: true,\n' +
    '     ?   role?: true,\n' +
    '     ?   createdAt?: true,\n' +
    '     ?   updatedAt?: true,\n' +
    '     ?   profile?: true\n' +
    '       }\n' +
    '     })\n' +
    '\n' +
    '\n' +
    'The `select` statement for type User needs at least one truthy value.\n',
  timestamp: '15/Aug/2022:07:02:56 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users/213',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.findUnique()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:40:36\n' +
    '\n' +
    "  37 const isAdmin = req.isRole(['admin']);\n" +
    '  38 \n' +
    '  39 const { id } = req.params;\n' +
    '→ 40 const user = await prisma.user.findUnique({\n' +
    '       where: {\n' +
    '         id: 213\n' +
    '       },\n' +
    '       select: {\n' +
    '     ?   password?: true,\n' +
    '     ?   id?: true,\n' +
    '     ?   email?: true,\n' +
    '     ?   username?: true,\n' +
    '     ?   role?: true,\n' +
    '     ?   createdAt?: true,\n' +
    '     ?   updatedAt?: true,\n' +
    '     ?   profile?: true\n' +
    '       }\n' +
    '     })\n' +
    '\n' +
    '\n' +
    'The `select` statement for type User needs at least one truthy value.\n',
  timestamp: '15/Aug/2022:07:04:49 +0800'
}
{
  request: {
    method: 'PATCH',
    url: '/api/v1/users/10001/profile',
    remoteAddress: '::1',
    body: {
      firstName: 'Margaret',
      lastName: 'Bergstrom',
      imageUrl: 'https://cdn.fakercloud.com/avatars/frankiefreesbie_128.jpg',
      bio: 'Eum itaque ratione. Ratione molestiae voluptatem repellendus odit minima quis reprehenderit. Voluptatum et facilis qui enim aut.'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.update()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:108:36\n' +
    '\n' +
    '  105 validateSchema(CreateProfileSchema),\n' +
    '  106 asyncHandler(async (req, res) => {\n' +
    '  107   const { id } = req.params;\n' +
    '→ 108   const user = await prisma.user.update(\n' +
    `  Query interpretation error. Error for binding '1': AssertionError("Expected a valid parent ID to be present for nested update to-one case.")`,
  timestamp: '16/Aug/2022:04:44:20 +0800'
}
{
  request: {
    method: 'PATCH',
    url: '/api/v1/users/10001/profile',
    remoteAddress: '::1',
    body: {
      firstName: 'Shany',
      lastName: 'Gottlieb',
      imageUrl: 'https://cdn.fakercloud.com/avatars/madysondesigns_128.jpg',
      bio: 'Omnis voluptatum nulla ut ea nihil accusamus nam eos. Hic aut consequatur vero. Est ut adipisci at. Explicabo quo quo ipsa.'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.update()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:108:36\n' +
    '\n' +
    '  105 validateSchema(CreateProfileSchema),\n' +
    '  106 asyncHandler(async (req, res) => {\n' +
    '  107   const { id } = req.params;\n' +
    '→ 108   const user = await prisma.user.update(\n' +
    `  Query interpretation error. Error for binding '1': AssertionError("Expected a valid parent ID to be present for nested update to-one case.")`,
  timestamp: '16/Aug/2022:04:44:44 +0800'
}
{
  request: {
    method: 'PATCH',
    url: '/api/v1/users/10001/profile',
    remoteAddress: '::1',
    body: {
      firstName: 'Jody',
      lastName: 'Crist',
      imageUrl: 'https://cdn.fakercloud.com/avatars/jedbridges_128.jpg',
      bio: 'Non ducimus excepturi similique quos voluptatum sed et. Illo qui molestiae quia consequatur excepturi et. Odio sunt error dolorem qui explicabo voluptas animi eos quae.'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.update()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:108:36\n' +
    '\n' +
    '  105 validateSchema(CreateProfileSchema),\n' +
    '  106 asyncHandler(async (req, res) => {\n' +
    '  107   const { id } = req.params;\n' +
    '→ 108   const user = await prisma.user.update(\n' +
    `  Query interpretation error. Error for binding '1': AssertionError("Expected a valid parent ID to be present for nested update to-one case.")`,
  timestamp: '16/Aug/2022:04:45:18 +0800'
}
{
  request: {
    method: 'PATCH',
    url: '/api/v1/users/10001/profile',
    remoteAddress: '::1',
    body: {
      firstName: 'Marlon',
      lastName: 'Bahringer',
      imageUrl: 'https://cdn.fakercloud.com/avatars/ariffsetiawan_128.jpg',
      bio: 'Et qui sed explicabo voluptate. Voluptatem molestiae eos sint accusantium aliquid qui. Et fugit deserunt ex.'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.update()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:110:36\n' +
    '\n' +
    '  107 const { id } = req.params;\n' +
    '  108 console.log(id);\n' +
    '  109 console.log(Number(id));\n' +
    '→ 110 const user = await prisma.user.update(\n' +
    `  Query interpretation error. Error for binding '1': AssertionError("Expected a valid parent ID to be present for nested update to-one case.")`,
  timestamp: '16/Aug/2022:04:45:36 +0800'
}
{
  request: {
    method: 'PATCH',
    url: '/api/v1/users/10001/profile',
    remoteAddress: '::1',
    body: {
      firstName: 'Ophelia',
      lastName: 'Jacobs',
      imageUrl: 'https://cdn.fakercloud.com/avatars/marcusgorillius_128.jpg',
      bio: 'Quae amet ut consequuntur quod corrupti commodi beatae. Occaecati possimus tempore quo veniam nulla consequatur. In asperiores nihil sit fugiat expedita et eos. Quia consequatur ab quidem quos atque laboriosam quia.'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.update()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:110:36\n' +
    '\n' +
    '  107 const { id } = req.params;\n' +
    '  108 console.log(id);\n' +
    '  109 console.log(Number(id));\n' +
    '→ 110 const user = await prisma.user.update(\n' +
    `  Query interpretation error. Error for binding '1': AssertionError("Expected a valid parent ID to be present for nested update to-one case.")`,
  timestamp: '16/Aug/2022:04:46:01 +0800'
}
{
  request: {
    method: 'PATCH',
    url: '/api/v1/users/10001/profile',
    remoteAddress: '::1',
    body: {
      firstName: 'Lacy',
      lastName: 'Carter',
      imageUrl: 'https://cdn.fakercloud.com/avatars/dzantievm_128.jpg',
      bio: 'Cupiditate inventore nihil rerum. Earum eaque molestiae. Recusandae inventore sit eveniet nisi dolorem voluptates sint beatae aspernatur. Consequuntur sed dolores rem eaque eos vel tenetur id ea.'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.update()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:109:36\n' +
    '\n' +
    '  106 asyncHandler(async (req, res) => {\n' +
    '  107   const { id } = req.params;\n' +
    '  108   console.log(req.body);\n' +
    '→ 109   const user = await prisma.user.update(\n' +
    `  Query interpretation error. Error for binding '1': AssertionError("Expected a valid parent ID to be present for nested update to-one case.")`,
  timestamp: '16/Aug/2022:04:46:09 +0800'
}
{
  request: {
    method: 'PATCH',
    url: '/api/v1/users/10001/profile',
    remoteAddress: '::1',
    body: {
      firstName: 'Jaquelin',
      lastName: 'Huels',
      imageUrl: 'https://cdn.fakercloud.com/avatars/notbadart_128.jpg'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.update()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:109:36\n' +
    '\n' +
    '  106 asyncHandler(async (req, res) => {\n' +
    '  107   const { id } = req.params;\n' +
    '  108   console.log(req.body);\n' +
    '→ 109   const user = await prisma.user.update(\n' +
    `  Query interpretation error. Error for binding '1': AssertionError("Expected a valid parent ID to be present for nested update to-one case.")`,
  timestamp: '16/Aug/2022:04:46:40 +0800'
}
{
  request: {
    method: 'PATCH',
    url: '/api/v1/users/10001/profile',
    remoteAddress: '::1',
    body: {
      firstName: 'Dorcas',
      lastName: 'Bogisich',
      imageUrl: 'https://cdn.fakercloud.com/avatars/jodytaggart_128.jpg',
      bio: 'Eligendi dolor qui quibusdam vel fugiat ea quam. Aspernatur inventore adipisci facilis dicta ullam enim expedita ut nobis. Nemo aspernatur rem dolorem error est ut rem facere asperiores. Qui maiores vel fugit qui.'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.update()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:109:36\n' +
    '\n' +
    '  106 asyncHandler(async (req, res) => {\n' +
    '  107   const { id } = req.params;\n' +
    '  108   console.log(req.body);\n' +
    '→ 109   const user = await prisma.user.update(\n' +
    `  Query interpretation error. Error for binding '1': AssertionError("Expected a valid parent ID to be present for nested update to-one case.")`,
  timestamp: '16/Aug/2022:04:47:00 +0800'
}
{
  request: {
    method: 'PATCH',
    url: '/api/v1/users/10001/profile',
    remoteAddress: '::1',
    body: {
      firstName: 'Jasen',
      lastName: 'Farrell',
      imageUrl: 'https://cdn.fakercloud.com/avatars/nvkznemo_128.jpg',
      bio: 'Sapiente a ipsam in et vitae optio et ex. Dolorem earum aut nulla earum tempora animi dignissimos fuga. Et dolor nam impedit voluptas debitis error est cupiditate. Voluptatem ea aut.'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.update()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:109:36\n' +
    '\n' +
    '  106 asyncHandler(async (req, res) => {\n' +
    '  107   const { id } = req.params;\n' +
    '  108   console.log(req.body);\n' +
    '→ 109   const user = await prisma.user.update(\n' +
    `  Query interpretation error. Error for binding '1': AssertionError("Expected a valid parent ID to be present for nested update to-one case.")`,
  timestamp: '16/Aug/2022:04:47:07 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/users/10001/profile',
    remoteAddress: '::1',
    body: {
      firstName: 'Mercedes',
      lastName: 'Hermiston',
      imageUrl: 'https://cdn.fakercloud.com/avatars/aroon_sharma_128.jpg',
      bio: 'Placeat et officiis molestiae laboriosam odit deserunt occaecati similique sit. Provident repudiandae et debitis expedita deleniti dolor. Voluptate officia porro.'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.update()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:109:36\n' +
    '\n' +
    '  106 asyncHandler(async (req, res) => {\n' +
    '  107   const { id } = req.params;\n' +
    '  108   console.log(req.body);\n' +
    '→ 109   const user = await prisma.user.update(\n' +
    "  The change you are trying to make would violate the required relation 'ProfileToUser' between the `Profile` and `User` models.",
  timestamp: '16/Aug/2022:04:49:22 +0800'
}
{
  request: {
    method: 'PATCH',
    url: '/api/v1/users/10001/profile',
    remoteAddress: '::1',
    body: {
      firstName: 'Ardith',
      lastName: 'Wolf',
      imageUrl: 'https://cdn.fakercloud.com/avatars/9lessons_128.jpg',
      bio: 'Illo illo molestiae rem odio similique aut dicta facilis omnis. Necessitatibus ipsam aut nisi dolorem magnam praesentium facilis. Aliquid recusandae excepturi. Ea deserunt cupiditate temporibus nam aut consectetur aut. Laudantium id reiciendis optio voluptate ex recusandae deserunt. Sed iure architecto voluptatibus quis labore quam temporibus deserunt.'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.update()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:135:36\n' +
    '\n' +
    '  132 validateSchema(CreateProfileSchema),\n' +
    '  133 asyncHandler(async (req, res) => {\n' +
    '  134   const { id } = req.params;\n' +
    '→ 135   const user = await prisma.user.update(\n' +
    "  The provided value for the column is too long for the column's type. Column: bio",
  timestamp: '16/Aug/2022:04:52:27 +0800'
}
{
  request: {
    method: 'PATCH',
    url: '/api/v1/users/10001/profile',
    remoteAddress: '::1',
    body: {
      firstName: 'Regan',
      lastName: 'Botsford',
      imageUrl: 'https://cdn.fakercloud.com/avatars/samgrover_128.jpg',
      bio: 'Eos ipsum neque repellendus adipisci. Nulla ea temporibus deleniti sit aut et dolorum. Aperiam totam ipsa id et at expedita laudantium. Eaque fuga rerum. Recusandae consequuntur a consequuntur voluptates eligendi molestias aspernatur cum debitis.'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.update()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:135:36\n' +
    '\n' +
    '  132 validateSchema(CreateProfileSchema),\n' +
    '  133 asyncHandler(async (req, res) => {\n' +
    '  134   const { id } = req.params;\n' +
    '→ 135   const user = await prisma.user.update(\n' +
    "  The provided value for the column is too long for the column's type. Column: bio",
  timestamp: '16/Aug/2022:04:52:50 +0800'
}
{
  request: {
    method: 'PATCH',
    url: '/api/v1/users/2/profile',
    remoteAddress: '::1',
    body: {
      firstName: 'Zoie',
      lastName: 'Rau',
      imageUrl: 'https://cdn.fakercloud.com/avatars/belyaev_rs_128.jpg',
      bio: 'Voluptatem consectetur omnis quas est qui repellat. Sunt qui et. Deleniti voluptas ullam iure quia blanditiis iure odit earum.'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.update()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:136:36\n' +
    '\n' +
    '  133 validateSchema(CreateProfileSchema),\n' +
    '  134 asyncHandler(async (req, res) => {\n' +
    '  135   const { id } = req.params;\n' +
    '→ 136   const user = await prisma.user.update(\n' +
    `  Query interpretation error. Error for binding '1': AssertionError("Expected a valid parent ID to be present for nested update to-one case.")`,
  timestamp: '16/Aug/2022:02:59:12 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/users/1/profile',
    remoteAddress: '::1',
    body: {
      firstName: 'Eldora',
      lastName: 'Borer',
      imageUrl: 'https://cdn.fakercloud.com/avatars/sindresorhus_128.jpg',
      bio: 'Itaque magnam voluptate amet sunt et voluptas iste dolores. Reprehenderit vel soluta occaecati laboriosam assumenda. Consequatur illum deserunt deserunt officia. Id ut est nulla sed quibusdam corporis voluptatem ut. Minima neque similique quidem nihil id hic sapiente.'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.update()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:114:36\n' +
    '\n' +
    '  111 // if (existingProfile) {\n' +
    "  112 //   throw createError(409, 'Profile already exists');\n" +
    '  113 // }\n' +
    '→ 114 const user = await prisma.user.update(\n' +
    "  The change you are trying to make would violate the required relation 'ProfileToUser' between the `Profile` and `User` models.",
  timestamp: '16/Aug/2022:03:00:28 +0800'
}
{
  request: {
    method: 'PUT',
    url: '/api/v1/users/1612312',
    remoteAddress: '::1',
    body: {
      email: 'Hortense_Quitzon@hotmail.com',
      username: 'Betty.Littel',
      password: '1q!Q1q!Q',
      role: 'user'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.update()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:137:36\n' +
    '\n' +
    '  134 asyncHandler(async (req, res) => {\n' +
    '  135   const { id } = req.params;\n' +
    '  136   const { password, ...rest } = req.body;\n' +
    '→ 137   const user = await prisma.user.update(\n' +
    '  An operation failed because it depends on one or more records that were required but not found. Record to update not found.',
  timestamp: '16/Aug/2022:07:14:04 +0800'
}
{
  request: {
    method: 'PUT',
    url: '/api/v1/users/1230123',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.upsert()` invocation:\n' +
    '\n' +
    '{\n' +
    '  where: {\n' +
    '    id: 1230123\n' +
    '  },\n' +
    '  update: {\n' +
    '    password: undefined\n' +
    '  },\n' +
    '  create: {\n' +
    '    id: 1230123,\n' +
    '    ~~\n' +
    '+   password: String,\n' +
    '+   email: String,\n' +
    '+   username: String,\n' +
    '?   role?: admin | user,\n' +
    '?   createdAt?: DateTime,\n' +
    '?   updatedAt?: DateTime,\n' +
    '?   profile?: {\n' +
    '?     create?: ProfileCreateWithoutUserInput | ProfileUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: ProfileCreateOrConnectWithoutUserInput,\n' +
    '?     connect?: ProfileWhereUniqueInput\n' +
    '?   },\n' +
    '?   cart?: {\n' +
    '?     create?: CartCreateWithoutUserInput | CartUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: CartCreateOrConnectWithoutUserInput,\n' +
    '?     connect?: CartWhereUniqueInput\n' +
    '?   },\n' +
    '?   orders?: {\n' +
    '?     create?: OrderCreateWithoutUserInput | OrderCreateWithoutUserInput | OrderUncheckedCreateWithoutUserInput | OrderUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput,\n' +
    '?     createMany?: OrderCreateManyUserInputEnvelope,\n' +
    '?     connect?: OrderWhereUniqueInput | OrderWhereUniqueInput\n' +
    '?   }\n' +
    '  }\n' +
    '}\n' +
    '\n' +
    'Unknown arg `id` in create.id for type UserCreateInput.\n' +
    'Argument email for create.email is missing.\n' +
    'Argument username for create.username is missing.\n' +
    'Argument password for create.password is missing.\n' +
    '\n' +
    'Note: Lines with + are required, lines with ? are optional.\n',
  timestamp: '16/Aug/2022:07:26:16 +0800'
}
{
  request: {
    method: 'PUT',
    url: '/api/v1/users/1230123',
    remoteAddress: '::1',
    body: {
      email: 'Katherine.Corwin@hotmail.com',
      username: 'Eusebio_Abernathy42',
      role: 'user'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.upsert()` invocation:\n' +
    '\n' +
    '{\n' +
    '  where: {\n' +
    '    id: 1230123\n' +
    '  },\n' +
    '  update: {\n' +
    "    email: 'Katherine.Corwin@hotmail.com',\n" +
    "    username: 'Eusebio_Abernathy42',\n" +
    "    role: 'user',\n" +
    '    password: undefined\n' +
    '  },\n' +
    '  create: {\n' +
    "    email: 'Katherine.Corwin@hotmail.com',\n" +
    "    username: 'Eusebio_Abernathy42',\n" +
    "    role: 'user',\n" +
    '    id: 1230123,\n' +
    '    ~~\n' +
    '+   password: String,\n' +
    '?   createdAt?: DateTime,\n' +
    '?   updatedAt?: DateTime,\n' +
    '?   profile?: {\n' +
    '?     create?: ProfileCreateWithoutUserInput | ProfileUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: ProfileCreateOrConnectWithoutUserInput,\n' +
    '?     connect?: ProfileWhereUniqueInput\n' +
    '?   },\n' +
    '?   cart?: {\n' +
    '?     create?: CartCreateWithoutUserInput | CartUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: CartCreateOrConnectWithoutUserInput,\n' +
    '?     connect?: CartWhereUniqueInput\n' +
    '?   },\n' +
    '?   orders?: {\n' +
    '?     create?: OrderCreateWithoutUserInput | OrderCreateWithoutUserInput | OrderUncheckedCreateWithoutUserInput | OrderUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput,\n' +
    '?     createMany?: OrderCreateManyUserInputEnvelope,\n' +
    '?     connect?: OrderWhereUniqueInput | OrderWhereUniqueInput\n' +
    '?   }\n' +
    '  }\n' +
    '}\n' +
    '\n' +
    'Unknown arg `id` in create.id for type UserCreateInput.\n' +
    'Argument password for create.password is missing.\n' +
    '\n' +
    'Note: Lines with + are required, lines with ? are optional.\n',
  timestamp: '16/Aug/2022:07:26:26 +0800'
}
{
  request: {
    method: 'PUT',
    url: '/api/v1/users/1230123',
    remoteAddress: '::1',
    body: {
      email: 'Dejon_Gutmann@yahoo.com',
      username: 'Olaf84',
      role: 'user'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.upsert()` invocation:\n' +
    '\n' +
    '{\n' +
    '  where: {\n' +
    '    id: 1230123\n' +
    '  },\n' +
    '  update: {\n' +
    "    email: 'Dejon_Gutmann@yahoo.com',\n" +
    "    username: 'Olaf84',\n" +
    "    role: 'user',\n" +
    '    password: undefined\n' +
    '  },\n' +
    '  create: {\n' +
    "    email: 'Dejon_Gutmann@yahoo.com',\n" +
    "    username: 'Olaf84',\n" +
    "    role: 'user',\n" +
    '    id: 1230123,\n' +
    '    ~~\n' +
    '+   password: String,\n' +
    '?   createdAt?: DateTime,\n' +
    '?   updatedAt?: DateTime,\n' +
    '?   profile?: {\n' +
    '?     create?: ProfileCreateWithoutUserInput | ProfileUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: ProfileCreateOrConnectWithoutUserInput,\n' +
    '?     connect?: ProfileWhereUniqueInput\n' +
    '?   },\n' +
    '?   cart?: {\n' +
    '?     create?: CartCreateWithoutUserInput | CartUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: CartCreateOrConnectWithoutUserInput,\n' +
    '?     connect?: CartWhereUniqueInput\n' +
    '?   },\n' +
    '?   orders?: {\n' +
    '?     create?: OrderCreateWithoutUserInput | OrderCreateWithoutUserInput | OrderUncheckedCreateWithoutUserInput | OrderUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput,\n' +
    '?     createMany?: OrderCreateManyUserInputEnvelope,\n' +
    '?     connect?: OrderWhereUniqueInput | OrderWhereUniqueInput\n' +
    '?   }\n' +
    '  }\n' +
    '}\n' +
    '\n' +
    'Unknown arg `id` in create.id for type UserCreateInput.\n' +
    'Argument password for create.password is missing.\n' +
    '\n' +
    'Note: Lines with + are required, lines with ? are optional.\n',
  timestamp: '16/Aug/2022:07:32:58 +0800'
}
{
  request: {
    method: 'PUT',
    url: '/api/v1/users/1230123',
    remoteAddress: '::1',
    body: { email: 'Declan5@gmail.com', username: 'Florian9', role: 'user' }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.upsert()` invocation:\n' +
    '\n' +
    '{\n' +
    '  where: {\n' +
    '    id: 1230123\n' +
    '  },\n' +
    '  update: {\n' +
    "    email: 'Declan5@gmail.com',\n" +
    "    username: 'Florian9',\n" +
    "    role: 'user',\n" +
    '    password: null\n' +
    '              ~~~~\n' +
    '  },\n' +
    '  create: {\n' +
    "    email: 'Declan5@gmail.com',\n" +
    "    username: 'Florian9',\n" +
    "    role: 'user',\n" +
    '    id: 1230123,\n' +
    '    ~~\n' +
    '+   password: String,\n' +
    '?   createdAt?: DateTime,\n' +
    '?   updatedAt?: DateTime,\n' +
    '?   profile?: {\n' +
    '?     create?: ProfileCreateWithoutUserInput | ProfileUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: ProfileCreateOrConnectWithoutUserInput,\n' +
    '?     connect?: ProfileWhereUniqueInput\n' +
    '?   },\n' +
    '?   cart?: {\n' +
    '?     create?: CartCreateWithoutUserInput | CartUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: CartCreateOrConnectWithoutUserInput,\n' +
    '?     connect?: CartWhereUniqueInput\n' +
    '?   },\n' +
    '?   orders?: {\n' +
    '?     create?: OrderCreateWithoutUserInput | OrderCreateWithoutUserInput | OrderUncheckedCreateWithoutUserInput | OrderUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput,\n' +
    '?     createMany?: OrderCreateManyUserInputEnvelope,\n' +
    '?     connect?: OrderWhereUniqueInput | OrderWhereUniqueInput\n' +
    '?   }\n' +
    '  }\n' +
    '}\n' +
    '\n' +
    'Argument password for update.password must not be null. Please use undefined instead.\n' +
    'Unknown arg `id` in create.id for type UserCreateInput.\n' +
    'Argument password for create.password is missing.\n' +
    '\n' +
    'Note: Lines with + are required, lines with ? are optional.\n',
  timestamp: '16/Aug/2022:07:33:27 +0800'
}
{
  request: {
    method: 'PUT',
    url: '/api/v1/users/1230123',
    remoteAddress: '::1',
    body: {
      email: 'Maxie_Halvorson@gmail.com',
      username: 'Hillard.Dibbert65',
      role: 'user'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.upsert()` invocation:\n' +
    '\n' +
    '{\n' +
    '  where: {\n' +
    '    id: 1230123\n' +
    '  },\n' +
    '  update: {\n' +
    "    email: 'Maxie_Halvorson@gmail.com',\n" +
    "    username: 'Hillard.Dibbert65',\n" +
    "    role: 'user',\n" +
    "    password: '1q!Q1q!Q'\n" +
    '  },\n' +
    '  create: {\n' +
    "    email: 'Maxie_Halvorson@gmail.com',\n" +
    "    username: 'Hillard.Dibbert65',\n" +
    "    role: 'user',\n" +
    '    id: 1230123,\n' +
    '    ~~\n' +
    '+   password: String,\n' +
    '?   createdAt?: DateTime,\n' +
    '?   updatedAt?: DateTime,\n' +
    '?   profile?: {\n' +
    '?     create?: ProfileCreateWithoutUserInput | ProfileUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: ProfileCreateOrConnectWithoutUserInput,\n' +
    '?     connect?: ProfileWhereUniqueInput\n' +
    '?   },\n' +
    '?   cart?: {\n' +
    '?     create?: CartCreateWithoutUserInput | CartUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: CartCreateOrConnectWithoutUserInput,\n' +
    '?     connect?: CartWhereUniqueInput\n' +
    '?   },\n' +
    '?   orders?: {\n' +
    '?     create?: OrderCreateWithoutUserInput | OrderCreateWithoutUserInput | OrderUncheckedCreateWithoutUserInput | OrderUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput,\n' +
    '?     createMany?: OrderCreateManyUserInputEnvelope,\n' +
    '?     connect?: OrderWhereUniqueInput | OrderWhereUniqueInput\n' +
    '?   }\n' +
    '  }\n' +
    '}\n' +
    '\n' +
    'Unknown arg `id` in create.id for type UserCreateInput.\n' +
    'Argument password for create.password is missing.\n' +
    '\n' +
    'Note: Lines with + are required, lines with ? are optional.\n',
  timestamp: '16/Aug/2022:07:33:33 +0800'
}
{
  request: {
    method: 'PUT',
    url: '/api/v1/users/1230123',
    remoteAddress: '::1',
    body: {
      email: 'Cheyenne86@yahoo.com',
      username: 'Verla.Hand77',
      role: 'user'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.upsert()` invocation:\n' +
    '\n' +
    '{\n' +
    '  where: {\n' +
    '    id: 1230123\n' +
    '  },\n' +
    '  update: {\n' +
    "    email: 'Cheyenne86@yahoo.com',\n" +
    "    username: 'Verla.Hand77',\n" +
    "    role: 'user',\n" +
    "    password: '1q!Q1q!Q'\n" +
    '  },\n' +
    '  create: {\n' +
    "    email: 'Cheyenne86@yahoo.com',\n" +
    "    username: 'Verla.Hand77',\n" +
    "    role: 'user',\n" +
    '    id: 1230123,\n' +
    '    ~~\n' +
    '+   password: String,\n' +
    '?   createdAt?: DateTime,\n' +
    '?   updatedAt?: DateTime,\n' +
    '?   profile?: {\n' +
    '?     create?: ProfileCreateWithoutUserInput | ProfileUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: ProfileCreateOrConnectWithoutUserInput,\n' +
    '?     connect?: ProfileWhereUniqueInput\n' +
    '?   },\n' +
    '?   cart?: {\n' +
    '?     create?: CartCreateWithoutUserInput | CartUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: CartCreateOrConnectWithoutUserInput,\n' +
    '?     connect?: CartWhereUniqueInput\n' +
    '?   },\n' +
    '?   orders?: {\n' +
    '?     create?: OrderCreateWithoutUserInput | OrderCreateWithoutUserInput | OrderUncheckedCreateWithoutUserInput | OrderUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput,\n' +
    '?     createMany?: OrderCreateManyUserInputEnvelope,\n' +
    '?     connect?: OrderWhereUniqueInput | OrderWhereUniqueInput\n' +
    '?   }\n' +
    '  }\n' +
    '}\n' +
    '\n' +
    'Unknown arg `id` in create.id for type UserCreateInput.\n' +
    'Argument password for create.password is missing.\n' +
    '\n' +
    'Note: Lines with + are required, lines with ? are optional.\n',
  timestamp: '16/Aug/2022:07:34:02 +0800'
}
{
  request: {
    method: 'PUT',
    url: '/api/v1/users/1230123',
    remoteAddress: '::1',
    body: {
      email: 'Alexzander51@gmail.com',
      username: 'Leta47',
      role: 'user'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.upsert()` invocation:\n' +
    '\n' +
    '{\n' +
    '  where: {\n' +
    '    id: 1230123\n' +
    '  },\n' +
    '  update: {\n' +
    "    email: 'Alexzander51@gmail.com',\n" +
    "    username: 'Leta47',\n" +
    "    role: 'user',\n" +
    "    password: '1q!Q1q!Q'\n" +
    '  },\n' +
    '  create: {\n' +
    "    email: 'Alexzander51@gmail.com',\n" +
    "    username: 'Leta47',\n" +
    "    role: 'user',\n" +
    '    id: 1230123,\n' +
    '    ~~\n' +
    '+   password: String,\n' +
    '?   createdAt?: DateTime,\n' +
    '?   updatedAt?: DateTime,\n' +
    '?   profile?: {\n' +
    '?     create?: ProfileCreateWithoutUserInput | ProfileUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: ProfileCreateOrConnectWithoutUserInput,\n' +
    '?     connect?: ProfileWhereUniqueInput\n' +
    '?   },\n' +
    '?   cart?: {\n' +
    '?     create?: CartCreateWithoutUserInput | CartUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: CartCreateOrConnectWithoutUserInput,\n' +
    '?     connect?: CartWhereUniqueInput\n' +
    '?   },\n' +
    '?   orders?: {\n' +
    '?     create?: OrderCreateWithoutUserInput | OrderCreateWithoutUserInput | OrderUncheckedCreateWithoutUserInput | OrderUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput,\n' +
    '?     createMany?: OrderCreateManyUserInputEnvelope,\n' +
    '?     connect?: OrderWhereUniqueInput | OrderWhereUniqueInput\n' +
    '?   }\n' +
    '  }\n' +
    '}\n' +
    '\n' +
    'Unknown arg `id` in create.id for type UserCreateInput.\n' +
    'Argument password for create.password is missing.\n' +
    '\n' +
    'Note: Lines with + are required, lines with ? are optional.\n',
  timestamp: '16/Aug/2022:07:34:30 +0800'
}
{
  request: {
    method: 'PUT',
    url: '/api/v1/users/1230123',
    remoteAddress: '::1',
    body: {
      email: 'Brando.Paucek@yahoo.com',
      username: 'Hector_Windler',
      role: 'user'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.upsert()` invocation:\n' +
    '\n' +
    '{\n' +
    '  where: {\n' +
    '    id: 1230123\n' +
    '  },\n' +
    '  update: {\n' +
    "    email: 'Brando.Paucek@yahoo.com',\n" +
    "    username: 'Hector_Windler',\n" +
    "    role: 'user'\n" +
    '  },\n' +
    '  create: {\n' +
    "    email: 'Brando.Paucek@yahoo.com',\n" +
    "    username: 'Hector_Windler',\n" +
    "    role: 'user',\n" +
    '    id: 1230123,\n' +
    '    ~~\n' +
    '+   password: String,\n' +
    '?   createdAt?: DateTime,\n' +
    '?   updatedAt?: DateTime,\n' +
    '?   profile?: {\n' +
    '?     create?: ProfileCreateWithoutUserInput | ProfileUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: ProfileCreateOrConnectWithoutUserInput,\n' +
    '?     connect?: ProfileWhereUniqueInput\n' +
    '?   },\n' +
    '?   cart?: {\n' +
    '?     create?: CartCreateWithoutUserInput | CartUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: CartCreateOrConnectWithoutUserInput,\n' +
    '?     connect?: CartWhereUniqueInput\n' +
    '?   },\n' +
    '?   orders?: {\n' +
    '?     create?: OrderCreateWithoutUserInput | OrderCreateWithoutUserInput | OrderUncheckedCreateWithoutUserInput | OrderUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput,\n' +
    '?     createMany?: OrderCreateManyUserInputEnvelope,\n' +
    '?     connect?: OrderWhereUniqueInput | OrderWhereUniqueInput\n' +
    '?   }\n' +
    '  }\n' +
    '}\n' +
    '\n' +
    'Unknown arg `id` in create.id for type UserCreateInput.\n' +
    'Argument password for create.password is missing.\n' +
    '\n' +
    'Note: Lines with + are required, lines with ? are optional.\n',
  timestamp: '16/Aug/2022:07:34:36 +0800'
}
{
  request: {
    method: 'PUT',
    url: '/api/v1/users/1',
    remoteAddress: '::1',
    body: {
      email: 'Amie.Dickinson72@gmail.com',
      username: 'Eugenia.Deckow',
      role: 'user'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.upsert()` invocation:\n' +
    '\n' +
    '{\n' +
    '  where: {\n' +
    '    id: 1\n' +
    '  },\n' +
    '  update: {\n' +
    "    email: 'Amie.Dickinson72@gmail.com',\n" +
    "    username: 'Eugenia.Deckow',\n" +
    "    role: 'user'\n" +
    '  },\n' +
    '  create: {\n' +
    "    email: 'Amie.Dickinson72@gmail.com',\n" +
    "    username: 'Eugenia.Deckow',\n" +
    "    role: 'user',\n" +
    '    id: 1,\n' +
    '    ~~\n' +
    '+   password: String,\n' +
    '?   createdAt?: DateTime,\n' +
    '?   updatedAt?: DateTime,\n' +
    '?   profile?: {\n' +
    '?     create?: ProfileCreateWithoutUserInput | ProfileUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: ProfileCreateOrConnectWithoutUserInput,\n' +
    '?     connect?: ProfileWhereUniqueInput\n' +
    '?   },\n' +
    '?   cart?: {\n' +
    '?     create?: CartCreateWithoutUserInput | CartUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: CartCreateOrConnectWithoutUserInput,\n' +
    '?     connect?: CartWhereUniqueInput\n' +
    '?   },\n' +
    '?   orders?: {\n' +
    '?     create?: OrderCreateWithoutUserInput | OrderCreateWithoutUserInput | OrderUncheckedCreateWithoutUserInput | OrderUncheckedCreateWithoutUserInput,\n' +
    '?     connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput,\n' +
    '?     createMany?: OrderCreateManyUserInputEnvelope,\n' +
    '?     connect?: OrderWhereUniqueInput | OrderWhereUniqueInput\n' +
    '?   }\n' +
    '  }\n' +
    '}\n' +
    '\n' +
    'Unknown arg `id` in create.id for type UserCreateInput.\n' +
    'Argument password for create.password is missing.\n' +
    '\n' +
    'Note: Lines with + are required, lines with ? are optional.\n',
  timestamp: '16/Aug/2022:07:34:45 +0800'
}
{
  request: {
    method: 'PUT',
    url: '/api/v1/users/1230123/profile',
    remoteAddress: '::1',
    body: {
      firstName: 'Jackie',
      lastName: 'Veum',
      imageUrl: 'https://cdn.fakercloud.com/avatars/thaisselenator__128.jpg',
      bio: 'Atque qui praesentium est ut sit aliquid excepturi. Porro reprehenderit veniam inventore. Omnis omnis praesentium ea in eum nostrum explicabo. Vitae et et culpa veniam alias. Atque repellat dolore qui esse nemo illo est magnam neque. Culpa quia suscipit.'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.update()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:167:36\n' +
    '\n' +
    "  164 //   throw createError(404, 'Profile has not been created');\n" +
    '  165 // }\n' +
    '  166 \n' +
    '→ 167 const user = await prisma.user.update({\n' +
    '        where: {\n' +
    '          id: 1230123\n' +
    '        },\n' +
    '        data: {\n' +
    '          profile: {\n' +
    '            upsert: {\n' +
    "              firstName: 'Jackie',\n" +
    '              ~~~~~~~~~\n' +
    "              lastName: 'Veum',\n" +
    '              ~~~~~~~~\n' +
    "              imageUrl: 'https://cdn.fakercloud.com/avatars/thaisselenator__128.jpg',\n" +
    '              ~~~~~~~~\n' +
    "              bio: 'Atque qui praesentium est ut sit aliquid excepturi. Porro reprehenderit veniam inventore. Omnis omnis praesentium ea in eum nostrum explicabo. Vitae et et culpa veniam alias. Atque repellat dolore qui esse nemo illo est magnam neque. Culpa quia suscipit.',\n" +
    '              ~~~\n' +
    '      +       update: ProfileUpdateWithoutUserInput | ProfileUncheckedUpdateWithoutUserInput,\n' +
    '      +       create: ProfileCreateWithoutUserInput | ProfileUncheckedCreateWithoutUserInput\n' +
    '            }\n' +
    '          }\n' +
    '        }\n' +
    '      })\n' +
    '\n' +
    'Unknown arg `firstName` in data.profile.upsert.firstName for type ProfileUpsertWithoutUserInput. Did you mean `create`?\n' +
    'Unknown arg `lastName` in data.profile.upsert.lastName for type ProfileUpsertWithoutUserInput. Did you mean `update`?\n' +
    'Unknown arg `imageUrl` in data.profile.upsert.imageUrl for type ProfileUpsertWithoutUserInput. Did you mean `update`?\n' +
    'Unknown arg `bio` in data.profile.upsert.bio for type ProfileUpsertWithoutUserInput.\n' +
    'Argument update for data.profile.upsert.update is missing.\n' +
    'Argument create for data.profile.upsert.create is missing.\n' +
    '\n' +
    'Note: Lines with + are required\n',
  timestamp: '16/Aug/2022:08:11:28 +0800'
}
{
  request: {
    method: 'PUT',
    url: '/api/v1/users/1230123/profile',
    remoteAddress: '::1',
    body: {
      firstName: 'Christian',
      lastName: 'Baumbach',
      imageUrl: 'https://cdn.fakercloud.com/avatars/_victa_128.jpg',
      bio: 'Harum blanditiis totam. Veniam rerum sapiente aliquam ut possimus beatae. Veniam veritatis nulla quo quo deleniti nobis. Qui excepturi mollitia quia recusandae blanditiis.'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.update()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:167:36\n' +
    '\n' +
    "  164 //   throw createError(404, 'Profile has not been created');\n" +
    '  165 // }\n' +
    '  166 \n' +
    '→ 167 const user = await prisma.user.update({\n' +
    '        where: {\n' +
    '          id: 1230123\n' +
    '        },\n' +
    '        data: {\n' +
    '          profile: {\n' +
    '            upsert: {\n' +
    "              firstName: 'Christian',\n" +
    '              ~~~~~~~~~\n' +
    "              lastName: 'Baumbach',\n" +
    '              ~~~~~~~~\n' +
    "              imageUrl: 'https://cdn.fakercloud.com/avatars/_victa_128.jpg',\n" +
    '              ~~~~~~~~\n' +
    "              bio: 'Harum blanditiis totam. Veniam rerum sapiente aliquam ut possimus beatae. Veniam veritatis nulla quo quo deleniti nobis. Qui excepturi mollitia quia recusandae blanditiis.',\n" +
    '              ~~~\n' +
    '      +       update: ProfileUpdateWithoutUserInput | ProfileUncheckedUpdateWithoutUserInput,\n' +
    '      +       create: ProfileCreateWithoutUserInput | ProfileUncheckedCreateWithoutUserInput\n' +
    '            }\n' +
    '          }\n' +
    '        }\n' +
    '      })\n' +
    '\n' +
    'Unknown arg `firstName` in data.profile.upsert.firstName for type ProfileUpsertWithoutUserInput. Did you mean `create`?\n' +
    'Unknown arg `lastName` in data.profile.upsert.lastName for type ProfileUpsertWithoutUserInput. Did you mean `update`?\n' +
    'Unknown arg `imageUrl` in data.profile.upsert.imageUrl for type ProfileUpsertWithoutUserInput. Did you mean `update`?\n' +
    'Unknown arg `bio` in data.profile.upsert.bio for type ProfileUpsertWithoutUserInput.\n' +
    'Argument update for data.profile.upsert.update is missing.\n' +
    'Argument create for data.profile.upsert.create is missing.\n' +
    '\n' +
    'Note: Lines with + are required\n',
  timestamp: '16/Aug/2022:08:11:40 +0800'
}
{
  request: {
    method: 'PUT',
    url: '/api/v1/users/1230123/profile',
    remoteAddress: '::1',
    body: {
      firstName: 'Bernardo',
      lastName: 'Ledner',
      imageUrl: 'https://cdn.fakercloud.com/avatars/amanruzaini_128.jpg',
      bio: 'Rerum dolores natus ipsam deserunt vero incidunt suscipit quae modi. Illum cum omnis voluptas. Id minima aut non nemo vel.'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.update()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:167:36\n' +
    '\n' +
    "  164 //   throw createError(404, 'Profile has not been created');\n" +
    '  165 // }\n' +
    '  166 \n' +
    '→ 167 const user = await prisma.user.update(\n' +
    "  An operation failed because it depends on one or more records that were required but not found. No 'User' record (needed to update inlined relation on 'Profile') was found for a nested upsert on relation 'ProfileToUser'.",
  timestamp: '16/Aug/2022:08:13:15 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/products',
    remoteAddress: '::1',
    body: {
      name: 'Incredible Rubber Cheese',
      description: 'Ipsam accusantium molestiae suscipit assumenda fugiat reiciendis quaerat assumenda. Quis quaerat similique provident velit sit. Ratione totam in et sed quisquam aut voluptatem molestiae consequatur.',
      imageUrl: 'http://placeimg.com/640/480/cats',
      price: 1.23,
      quantity: 0
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.product.create()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\products\\products.controller.ts:43:42\n' +
    '\n' +
    "  40 '/',\n" +
    '  41 validateSchema(CreateProductSchema),\n' +
    '  42 asyncHandler(async (req, res) => {\n' +
    '→ 43   const product = await prisma.product.create({\n' +
    '         data: {\n' +
    "           name: 'Incredible Rubber Cheese',\n" +
    "           description: 'Ipsam accusantium molestiae suscipit assumenda fugiat reiciendis quaerat assumenda. Quis quaerat similique provident velit sit. Ratione totam in et sed quisquam aut voluptatem molestiae consequatur.',\n" +
    "           imageUrl: 'http://placeimg.com/640/480/cats',\n" +
    '           price: 1.23,\n' +
    '                  ~~~~\n' +
    '           quantity: 0\n' +
    '         }\n' +
    '       })\n' +
    '\n' +
    'Argument price: Got invalid value 1.23 on prisma.createOneProduct. Provided Float, expected Int.\n' +
    '\n',
  timestamp: '16/Aug/2022:11:32:20 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/products',
    remoteAddress: '::1',
    body: {
      name: 'Ergonomic Rubber Pizza',
      description: 'Dolorem iusto optio quo iure aut. Hic et provident sequi in voluptas nostrum. Cumque dolore unde odio molestias optio optio ut quasi. Nihil numquam minima quod deleniti.',
      imageUrl: 'http://placeimg.com/640/480/cats',
      price: 1.295,
      quantity: 0
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.product.create()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\products\\products.controller.ts:43:42\n' +
    '\n' +
    "  40 '/',\n" +
    '  41 validateSchema(CreateProductSchema),\n' +
    '  42 asyncHandler(async (req, res) => {\n' +
    '→ 43   const product = await prisma.product.create({\n' +
    '         data: {\n' +
    "           name: 'Ergonomic Rubber Pizza',\n" +
    "           description: 'Dolorem iusto optio quo iure aut. Hic et provident sequi in voluptas nostrum. Cumque dolore unde odio molestias optio optio ut quasi. Nihil numquam minima quod deleniti.',\n" +
    "           imageUrl: 'http://placeimg.com/640/480/cats',\n" +
    '           price: 1.295,\n' +
    '                  ~~~~~\n' +
    '           quantity: 0\n' +
    '         }\n' +
    '       })\n' +
    '\n' +
    'Argument price: Got invalid value 1.295 on prisma.createOneProduct. Provided Float, expected Int.\n' +
    '\n',
  timestamp: '16/Aug/2022:11:35:10 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/products',
    remoteAddress: '::1',
    body: {
      name: 'Rustic Frozen Computer',
      description: 'Magni rerum incidunt ea deleniti sapiente. Consequuntur rerum ut distinctio unde iure. Enim amet minima eos minima in. Omnis saepe corporis voluptatem odio voluptatem. Earum maxime nam eos voluptate vero voluptas voluptatem. Labore dolorem nesciunt commodi omnis eius qui suscipit.',
      imageUrl: 'http://placeimg.com/640/480/cats',
      price: 1.295,
      quantity: 0
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.product.create()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\products\\products.controller.ts:43:42\n' +
    '\n' +
    "  40 '/',\n" +
    '  41 validateSchema(CreateProductSchema),\n' +
    '  42 asyncHandler(async (req, res) => {\n' +
    '→ 43   const product = await prisma.product.create(\n' +
    "  The provided value for the column is too long for the column's type. Column: description",
  timestamp: '16/Aug/2022:11:35:25 +0800'
}
{
  request: {
    method: 'PUT',
    url: '/api/v1/products/412',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.product.upsert()` invocation:\n' +
    '\n' +
    '{\n' +
    '  where: {\n' +
    '    id: 412\n' +
    '  },\n' +
    '  update: {},\n' +
    '  create: {\n' +
    '+   name: String,\n' +
    '+   description: String,\n' +
    '+   imageUrl: String,\n' +
    '+   price: Float,\n' +
    '+   quantity: Int,\n' +
    '?   createdAt?: DateTime,\n' +
    '?   updatedAt?: DateTime,\n' +
    '?   carts?: {\n' +
    '?     create?: CartCreateWithoutItemsInput | CartCreateWithoutItemsInput | CartUncheckedCreateWithoutItemsInput | CartUncheckedCreateWithoutItemsInput,\n' +
    '?     connectOrCreate?: CartCreateOrConnectWithoutItemsInput | CartCreateOrConnectWithoutItemsInput,\n' +
    '?     connect?: CartWhereUniqueInput | CartWhereUniqueInput\n' +
    '?   },\n' +
    '?   orders?: {\n' +
    '?     create?: OrderCreateWithoutProductsInput | OrderCreateWithoutProductsInput | OrderUncheckedCreateWithoutProductsInput | OrderUncheckedCreateWithoutProductsInput,\n' +
    '?     connectOrCreate?: OrderCreateOrConnectWithoutProductsInput | OrderCreateOrConnectWithoutProductsInput,\n' +
    '?     connect?: OrderWhereUniqueInput | OrderWhereUniqueInput\n' +
    '?   }\n' +
    '  }\n' +
    '}\n' +
    '\n' +
    'Argument name for create.name is missing.\n' +
    'Argument description for create.description is missing.\n' +
    'Argument imageUrl for create.imageUrl is missing.\n' +
    'Argument price for create.price is missing.\n' +
    'Argument quantity for create.quantity is missing.\n' +
    '\n' +
    'Note: Lines with + are required, lines with ? are optional.\n',
  timestamp: '16/Aug/2022:11:39:38 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/products',
    remoteAddress: '::1',
    body: {
      name: 'Generic Concrete Chips',
      description: 'Legacy',
      imageUrl: 'http://placeimg.com/640/480/cats',
      price: 188.59,
      quantity: 148.49
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.product.create()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\products\\products.controller.ts:43:42\n' +
    '\n' +
    "  40 '/',\n" +
    '  41 validateSchema(CreateProductSchema),\n' +
    '  42 asyncHandler(async (req, res) => {\n' +
    '→ 43   const product = await prisma.product.create({\n' +
    '         data: {\n' +
    "           name: 'Generic Concrete Chips',\n" +
    "           description: 'Legacy',\n" +
    "           imageUrl: 'http://placeimg.com/640/480/cats',\n" +
    '           price: 188.59,\n' +
    '           quantity: 148.49\n' +
    '                     ~~~~~~\n' +
    '         }\n' +
    '       })\n' +
    '\n' +
    'Argument quantity: Got invalid value 148.49 on prisma.createOneProduct. Provided Float, expected Int.\n' +
    '\n',
  timestamp: '16/Aug/2022:11:41:22 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/products',
    remoteAddress: '::1',
    body: {
      name: 'Handmade Metal Salad',
      description: 'Investor',
      imageUrl: 'http://placeimg.com/640/480/cats',
      price: 586.16,
      quantity: 0.123
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.product.create()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\products\\products.controller.ts:43:42\n' +
    '\n' +
    "  40 '/',\n" +
    '  41 validateSchema(CreateProductSchema),\n' +
    '  42 asyncHandler(async (req, res) => {\n' +
    '→ 43   const product = await prisma.product.create({\n' +
    '         data: {\n' +
    "           name: 'Handmade Metal Salad',\n" +
    "           description: 'Investor',\n" +
    "           imageUrl: 'http://placeimg.com/640/480/cats',\n" +
    '           price: 586.16,\n' +
    '           quantity: 0.123\n' +
    '                     ~~~~~\n' +
    '         }\n' +
    '       })\n' +
    '\n' +
    'Argument quantity: Got invalid value 0.123 on prisma.createOneProduct. Provided Float, expected Int.\n' +
    '\n',
  timestamp: '16/Aug/2022:11:41:48 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users/relations',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.findMany()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:38:37\n' +
    '\n' +
    '  35 asyncHandler(async (req, res) => {\n' +
    '  36   const { skip, take } = parseQueries(req);\n' +
    '  37 \n' +
    '→ 38   const users = await prisma.user.findMany(\n' +
    '  The table `cart` does not exist in the current database.',
  timestamp: '17/Aug/2022:02:50:20 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users/relations',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.findUnique()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\common\\config\\passport.ts:47:40\n' +
    '\n' +
    '  44 new JwtStrategy(jwtStrategyOptions, async (payload, done) => {\n' +
    '  45   const id = payload.sub;\n' +
    '  46   try {\n' +
    '→ 47     const user = await prisma.user.findUnique(\n' +
    '  Database `express_auth` does not exist on the database server at `localhost:3306`.',
  timestamp: '17/Aug/2022:02:50:45 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users/relations',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.findMany()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:38:37\n' +
    '\n' +
    '  35 asyncHandler(async (req, res) => {\n' +
    '  36   const { skip, take } = parseQueries(req);\n' +
    '  37 \n' +
    '→ 38   const users = await prisma.user.findMany(\n' +
    '  The table `cart` does not exist in the current database.',
  timestamp: '17/Aug/2022:02:55:21 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users/1/relations',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.findUnique()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:76:36\n' +
    '\n' +
    "   73 validateParamInt('id'),\n" +
    '   74 asyncHandler(async (req, res) => {\n' +
    '   75   const { id } = req.params;\n' +
    '→  76   const user = await prisma.user.findUnique(\n' +
    '  The table `cart` does not exist in the current database.',
  timestamp: '17/Aug/2022:02:55:40 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users/relations',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.findMany()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:38:37\n' +
    '\n' +
    '  35 asyncHandler(async (req, res) => {\n' +
    '  36   const { skip, take } = parseQueries(req);\n' +
    '  37 \n' +
    '→ 38   const users = await prisma.user.findMany(\n' +
    '  The table `cart` does not exist in the current database.',
  timestamp: '17/Aug/2022:02:55:43 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/users/1230123/profile',
    remoteAddress: '::1',
    body: {
      firstName: 'Dylan',
      lastName: 'Lemke',
      imageUrl: 'https://cdn.fakercloud.com/avatars/emsgulam_128.jpg',
      bio: 'Possimus aliquam ea error quis veniam numquam. Fugiat voluptates qui corrupti enim nemo ut. Sed sapiente sint.'
    }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.update()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:119:36\n' +
    '\n' +
    '  116 if (existingProfile) {\n' +
    "  117   throw createError(409, 'Profile already exists');\n" +
    '  118 }\n' +
    '→ 119 const user = await prisma.user.update(\n' +
    "  An operation failed because it depends on one or more records that were required but not found. No 'User' record (needed to inline the relation with create on 'Profile' record) was found for a nested create on one-to-one relation 'ProfileToUser'.",
  timestamp: '17/Aug/2022:02:59:38 +0800'
}
{
  request: {
    method: 'PUT',
    url: '/api/v1/users/10/cart/1',
    remoteAddress: '::1',
    body: { quantity: 1 }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.cartItem.upsert()` invocation:\n' +
    '\n' +
    '{\n' +
    '  where: {\n' +
    '    userId: 10,\n' +
    '    productId: 1\n' +
    '  },\n' +
    '  ~~~~~~~~~~~~~~\n' +
    '  create: {\n' +
    '    userId: 10,\n' +
    '    productId: 1,\n' +
    '    quantity: 1\n' +
    '  },\n' +
    '  update: {\n' +
    '    quantity: 1\n' +
    '  }\n' +
    '}\n' +
    '\n' +
    'Argument where of type CartItemWhereUniqueInput needs exactly one argument, but you provided userId and productId. Please choose one. Available args: \n' +
    'type CartItemWhereUniqueInput {\n' +
    '  userId?: Int\n' +
    '  productId?: Int\n' +
    '}\n' +
    '\n',
  timestamp: '17/Aug/2022:03:43:02 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users/relations',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.findMany()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:39:37\n' +
    '\n' +
    '  36 asyncHandler(async (req, res) => {\n' +
    '  37   const { skip, take } = parseQueries(req);\n' +
    '  38 \n' +
    '→ 39   const users = await prisma.user.findMany({\n' +
    '         include: {\n' +
    '       ?   profile?: true,\n' +
    '           cart: true,\n' +
    '           ~~~~\n' +
    '           orders: true,\n' +
    '           ~~~~~~\n' +
    '       ?   Cart?: true\n' +
    '         },\n' +
    '         skip: 0,\n' +
    '         take: 10\n' +
    '       })\n' +
    '\n' +
    '\n' +
    'Unknown field `cart` for include statement on model User. Available options are listed in green. Did you mean `Cart`?\n' +
    'Unknown field `orders` for include statement on model User. Available options are listed in green. Did you mean `Cart`?\n',
  timestamp: '17/Aug/2022:04:21:15 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users/10/relations',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.findUnique()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:74:36\n' +
    '\n' +
    "   71 validateParamInt('id'),\n" +
    '   72 asyncHandler(async (req, res) => {\n' +
    '   73   const { id } = req.params;\n' +
    '→  74   const user = await prisma.user.findUnique({\n' +
    '          where: {\n' +
    '            id: 10\n' +
    '          },\n' +
    '          include: {\n' +
    '        ?   profile?: true,\n' +
    '            cart: true,\n' +
    '            ~~~~\n' +
    '            orders: true,\n' +
    '            ~~~~~~\n' +
    '        ?   Cart?: true\n' +
    '          }\n' +
    '        })\n' +
    '\n' +
    '\n' +
    'Unknown field `cart` for include statement on model User. Available options are listed in green. Did you mean `Cart`?\n' +
    'Unknown field `orders` for include statement on model User. Available options are listed in green. Did you mean `Cart`?\n',
  timestamp: '17/Aug/2022:04:22:09 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/profiles',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.profile.findMany()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\profiles\\profiles.controller.ts:17:43\n' +
    '\n' +
    "  14 '/',\n" +
    '  15 asyncHandler(async (req, res) => {\n' +
    '  16   const { skip, take } = parseQueries(req);\n' +
    '→ 17   const profiles = await prisma.profile.findMany(\n' +
    '  The column `express_auth.Profile.updatedById` does not exist in the current database.',
  timestamp: '26/Aug/2022:09:13:59 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/profiles',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.profile.findMany()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\profiles\\profiles.controller.ts:17:43\n' +
    '\n' +
    "  14 '/',\n" +
    '  15 asyncHandler(async (req, res) => {\n' +
    '  16   const { skip, take } = parseQueries(req);\n' +
    '→ 17   const profiles = await prisma.profile.findMany(\n' +
    '  The column `express_auth.Profile.updatedById` does not exist in the current database.',
  timestamp: '26/Aug/2022:09:14:19 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/profiles',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.profile.findMany()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\profiles\\profiles.controller.ts:17:43\n' +
    '\n' +
    "  14 '/',\n" +
    '  15 asyncHandler(async (req, res) => {\n' +
    '  16   const { skip, take } = parseQueries(req);\n' +
    '→ 17   const profiles = await prisma.profile.findMany(\n' +
    '  The column `express_auth.Profile.updatedById` does not exist in the current database.',
  timestamp: '26/Aug/2022:09:14:20 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users?limit=none',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.findMany()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:23:37\n' +
    '\n' +
    "  20 '/',\n" +
    '  21 asyncHandler(async (req, res) => {\n' +
    '  22   const { skip, take } = parseQueries(req);\n' +
    '→ 23   const users = await prisma.user.findMany(\n' +
    "  Value 'staff' not found in enum 'Role'",
  timestamp: '26/Aug/2022:09:21:22 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/users?limit=none',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.user.findMany()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\users\\users.controller.ts:23:37\n' +
    '\n' +
    "  20 '/',\n" +
    '  21 asyncHandler(async (req, res) => {\n' +
    '  22   const { skip, take } = parseQueries(req);\n' +
    '→ 23   const users = await prisma.user.findMany(\n' +
    "  Value 'staff' not found in enum 'Role'",
  timestamp: '26/Aug/2022:09:21:26 +0800'
}
{
  request: {
    method: 'GET',
    url: '/api/v1/products',
    remoteAddress: '::1',
    body: {}
  },
  level: 'error',
  message: "Cannot read properties of undefined (reading 'findMany')",
  timestamp: '27/Aug/2022:01:12:35 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/carts',
    remoteAddress: '::1',
    body: { userId: 12 }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.cart.create()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\carts\\carts.controller.ts:58:36\n' +
    '\n' +
    "   55 '/',\n" +
    '   56 validateSchema(CreateCartSchema),\n' +
    '   57 asyncHandler(async (req, res) => {\n' +
    '→  58   const cart = await prisma.cart.create({\n' +
    '          data: {\n' +
    '            userId: 12\n' +
    '          },\n' +
    '          include: {\n' +
    '        ?   user?: true,\n' +
    '        ?   cartItems?: true,\n' +
    '        ?   updatedBy?: true,\n' +
    '        ?   _count?: true\n' +
    '          }\n' +
    '        })\n' +
    '\n' +
    '\n' +
    'The `include` statement for type Cart must not be empty. Available options are listed in green.\n',
  timestamp: '27/Aug/2022:10:38:10 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/carts',
    remoteAddress: '::1',
    body: { userId: 12 }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.cart.create()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\carts\\carts.controller.ts:58:36\n' +
    '\n' +
    "   55 '/',\n" +
    '   56 validateSchema(CreateCartSchema),\n' +
    '   57 asyncHandler(async (req, res) => {\n' +
    '→  58   const cart = await prisma.cart.create({\n' +
    '          data: {\n' +
    '            userId: 12,\n' +
    '            ~~~~~~\n' +
    '        +   totalPrice: Float,\n' +
    '        +   totalQuantity: Int,\n' +
    '        +   user: {\n' +
    '        +     create?: UserCreateWithoutCartInput | UserUncheckedCreateWithoutCartInput,\n' +
    '        +     connectOrCreate?: UserCreateOrConnectWithoutCartInput,\n' +
    '        +     connect?: UserWhereUniqueInput\n' +
    '        +   },\n' +
    '        ?   cartItems?: {\n' +
    '        ?     create?: CartItemCreateWithoutCartInput | CartItemCreateWithoutCartInput | CartItemUncheckedCreateWithoutCartInput | CartItemUncheckedCreateWithoutCartInput,\n' +
    '        ?     connectOrCreate?: CartItemCreateOrConnectWithoutCartInput | CartItemCreateOrConnectWithoutCartInput,\n' +
    '        ?     createMany?: CartItemCreateManyCartInputEnvelope,\n' +
    '        ?     connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput\n' +
    '        ?   },\n' +
    '        ?   createdAt?: DateTime,\n' +
    '        ?   updatedAt?: DateTime,\n' +
    '        ?   updatedBy?: {\n' +
    '        ?     create?: UserCreateWithoutUpdatedCartsInput | UserUncheckedCreateWithoutUpdatedCartsInput,\n' +
    '        ?     connectOrCreate?: UserCreateOrConnectWithoutUpdatedCartsInput,\n' +
    '        ?     connect?: UserWhereUniqueInput\n' +
    '        ?   }\n' +
    '          }\n' +
    '        })\n' +
    '\n' +
    'Unknown arg `userId` in data.userId for type CartCreateInput. Did you mean `user`?\n' +
    'Argument totalPrice for data.totalPrice is missing.\n' +
    'Argument totalQuantity for data.totalQuantity is missing.\n' +
    'Argument user for data.user is missing.\n' +
    '\n' +
    'Note: Lines with + are required, lines with ? are optional.\n',
  timestamp: '27/Aug/2022:10:38:33 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/carts',
    remoteAddress: '::1',
    body: { userId: 1 }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.cart.create()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\carts\\carts.controller.ts:59:36\n' +
    '\n' +
    '   56 validateSchema(CreateCartSchema),\n' +
    '   57 asyncHandler(async (req, res) => {\n' +
    '   58   const userId = Number(req.body.userId);\n' +
    '→  59   const cart = await prisma.cart.create({\n' +
    '          data: {\n' +
    '            userId: 1,\n' +
    '            ~~~~~~\n' +
    '            user: {\n' +
    '              connect: {\n' +
    '                id: 1\n' +
    '              }\n' +
    '            },\n' +
    '        +   totalPrice: Float,\n' +
    '        +   totalQuantity: Int,\n' +
    '        ?   cartItems?: {\n' +
    '        ?     create?: CartItemCreateWithoutCartInput | CartItemCreateWithoutCartInput | CartItemUncheckedCreateWithoutCartInput | CartItemUncheckedCreateWithoutCartInput,\n' +
    '        ?     connectOrCreate?: CartItemCreateOrConnectWithoutCartInput | CartItemCreateOrConnectWithoutCartInput,\n' +
    '        ?     createMany?: CartItemCreateManyCartInputEnvelope,\n' +
    '        ?     connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput\n' +
    '        ?   },\n' +
    '        ?   createdAt?: DateTime,\n' +
    '        ?   updatedAt?: DateTime,\n' +
    '        ?   updatedBy?: {\n' +
    '        ?     create?: UserCreateWithoutUpdatedCartsInput | UserUncheckedCreateWithoutUpdatedCartsInput,\n' +
    '        ?     connectOrCreate?: UserCreateOrConnectWithoutUpdatedCartsInput,\n' +
    '        ?     connect?: UserWhereUniqueInput\n' +
    '        ?   }\n' +
    '          }\n' +
    '        })\n' +
    '\n' +
    'Unknown arg `userId` in data.userId for type CartCreateInput. Did you mean `user`?\n' +
    'Argument totalPrice for data.totalPrice is missing.\n' +
    'Argument totalQuantity for data.totalQuantity is missing.\n' +
    '\n' +
    'Note: Lines with + are required, lines with ? are optional.\n',
  timestamp: '27/Aug/2022:10:43:08 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/carts',
    remoteAddress: '::1',
    body: { userId: 1 }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.cart.create()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\carts\\carts.controller.ts:59:36\n' +
    '\n' +
    '   56 validateSchema(CreateCartSchema),\n' +
    '   57 asyncHandler(async (req, res) => {\n' +
    '   58   const { userId, ...rest } = req.body;\n' +
    '→  59   const cart = await prisma.cart.create({\n' +
    '          data: {\n' +
    '            user: {\n' +
    '              connect: {\n' +
    '                id: 1\n' +
    '              }\n' +
    '            },\n' +
    '        +   totalPrice: Float,\n' +
    '        +   totalQuantity: Int,\n' +
    '        ?   cartItems?: {\n' +
    '        ?     create?: CartItemCreateWithoutCartInput | CartItemCreateWithoutCartInput | CartItemUncheckedCreateWithoutCartInput | CartItemUncheckedCreateWithoutCartInput,\n' +
    '        ?     connectOrCreate?: CartItemCreateOrConnectWithoutCartInput | CartItemCreateOrConnectWithoutCartInput,\n' +
    '        ?     createMany?: CartItemCreateManyCartInputEnvelope,\n' +
    '        ?     connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput\n' +
    '        ?   },\n' +
    '        ?   createdAt?: DateTime,\n' +
    '        ?   updatedAt?: DateTime,\n' +
    '        ?   updatedBy?: {\n' +
    '        ?     create?: UserCreateWithoutUpdatedCartsInput | UserUncheckedCreateWithoutUpdatedCartsInput,\n' +
    '        ?     connectOrCreate?: UserCreateOrConnectWithoutUpdatedCartsInput,\n' +
    '        ?     connect?: UserWhereUniqueInput\n' +
    '        ?   }\n' +
    '          }\n' +
    '        })\n' +
    '\n' +
    'Argument totalPrice for data.totalPrice is missing.\n' +
    'Argument totalQuantity for data.totalQuantity is missing.\n' +
    '\n' +
    'Note: Lines with + are required, lines with ? are optional.\n',
  timestamp: '27/Aug/2022:10:44:16 +0800'
}
{
  request: {
    method: 'POST',
    url: '/api/v1/carts',
    remoteAddress: '::1',
    body: { userId: 1 }
  },
  level: 'error',
  message: '\n' +
    'Invalid `prisma.cart.create()` invocation in\n' +
    'A:\\Projects\\Backend\\express-ecommerce\\src\\modules\\carts\\carts.controller.ts:59:36\n' +
    '\n' +
    '   56 validateSchema(CreateCartSchema),\n' +
    '   57 asyncHandler(async (req, res) => {\n' +
    '   58   const { userId, ...rest } = req.body;\n' +
    '→  59   const cart = await prisma.cart.create(\n' +
    "  The change you are trying to make would violate the required relation 'CartToUser' between the `Cart` and `User` models.",
  timestamp: '27/Aug/2022:10:45:01 +0800'
}
